import numpy as np
import math
from sympy import symbols, Eq, solve


# no of rows are equal to the number of columns.
n = int(input("Enter the number of rows in a matrix"))
tpm = [[0 for x in range (n)] for y in range(n)]
for i in range (n):
    for j in range(n):
        tpm[i][j]=float(input())
print(tpm)


#take input of lambda
lmda=[]
for i in range(n):
    x=int(input("enter the value of lambda"))
    lmda.append(x)
print(lmda)


#exponential matrix
z_mat=np.zeros((n,n))
for i in range(n):
    for j in range(n):
        if i!=j:    
            z_mat[i][j]=lmda[i]
        
print(z_mat)


#generator matrix final
g_mat=np.zeros((n,n))
for i in range(n):
    for j in range(n):
        g_mat[i][j]=z_mat[i][j]*tpm[i][j]
        
for i in range(n):
    for j in range(n):
        if i==j:
            g_mat[i][j]=lmda[i]-2*(lmda[i])
print(g_mat)


vals=[]
a=1
for i in range(n):
    for j in range(n):
        vals.append(g_mat[j][i])
print(vals)

l={}
for i in range(0,3*n,n):
    l[i]=vals[i:i+3]
print(l)


vals=[]
a=1
for i in range(n):
    for j in range(n):
        vals.append(g_mat[j][i])
print(vals)

l={}
for i in range(0,3*n,n):
    l[i]=vals[i:i+3]
print(l)


#uniformized matrix
i=np.identity(n)
l_max=(max(lmda))**(-1)

h_mat=g_mat*l_max
k_mat=i+h_mat
print(k_mat)
